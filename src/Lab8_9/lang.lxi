%{
#include <math.h>
int lines = 0;
%}
%option noyywrap

DIGIT		[0-9]
NUMBER	    [1-9][O-9]*
STRING 	    \"[a-zA-Z]*\"
CONSTANT	{STRING}|{DIGIT}
ID		    [a-zA-Z][a-zA-Z0-9]*

%%

"regular"		{printf( "Reserved word: %s\n", yytext ); }
"read(n)"		{printf( "Reserved word: %s\n", yytext ); }
"check"		    {printf( "Reserved word: %s\n", yytext ); }
"entonces"		{printf( "Reserved word: %s\n", yytext ); }
"checkif"		{printf( "Reserved word: %s\n", yytext ); }
"not"		    {printf( "Reserved word: %s\n", yytext ); }
"loop"		    {printf( "Reserved word: %s\n", yytext ); }
"var"		    {printf( "Reserved word: %s\n", yytext ); }
"rango(a,b)"	{printf( "Reserved word: %s\n", yytext ); }
"show"		    {printf( "Reserved word: %s\n", yytext ); }
"end"		    {printf( "Reserved word: %s\n", yytext );}
"matriz"		{printf( "Reserved word: %s\n", yytext ); }
"haz"		    {printf( "Reserved word: %s\n", yytext );}
"mientras"		{printf( "Reserved word: %s\n", yytext ); }
"caracter"		{printf( "Reserved word: %s\n", yytext ); }
"constante"		{printf( "Reserved word: %s\n", yytext ); }
"programa"		{printf( "Reserved word: %s\n", yytext ); }
"empieza"		{printf( "Reserved word: %s\n", yytext ); }
"acaba"		    {printf( "Reserved word: %s\n", yytext ); }
"de"		    {printf( "Reserved word: %s\n", yytext ); }
"y"		        {printf( "Operator: %s\n", yytext ); }
"o"		        {printf( "Operator: %s\n", yytext ); }

{ID}		    {printf( "Identifier: %s\n", yytext ); }

{CONSTANT}		{printf( "Constant: %s\n", yytext ); }

"+"		{printf( "Operator: %s\n", yytext ); }
"-"		{printf( "Operator: %s\n", yytext ); }
"*"		{printf( "Operator: %s\n", yytext ); }
"/"		{printf( "Operator: %s\n", yytext ); }
"%"		{printf( "Operator: %s\n", yytext ); }
"<="		{printf( "Operator: %s\n", yytext ); }
"<"		{printf( "Operator: %s\n", yytext ); }
"=="		{printf( "Operator: %s\n", yytext ); }
">="		{printf( "Operator: %s\n", yytext ); }
">"		{printf( "Operator: %s\n", yytext ); }

"("		{printf( "Separator: %s\n", yytext ); }
")"		{printf( "Separator: %s\n", yytext ); }
"["		{printf( "Separator: %s\n", yytext ); }
"]"		{printf( "Separator: %s\n", yytext ); }
"{"		{printf( "Separator: %s\n", yytext ); }
"}"		{printf( "Separator: %s\n", yytext ); }
":"		{printf( "Separator: %s\n", yytext ); }
";"		{printf( "Separator: %s\n", yytext ); }
"'"		{printf( "Separator: %s\n", yytext ); }
","		{printf( "Separator: %s\n", yytext ); }

[ \t]+         /* spaces */
[\n]+		{++lines;}

.		{printf( "Illegal symbol at line %d\n", lines); return -1;}


%%
main( argc, argv )
int argc;
char **argv;
{
    ++argv, --argc; /* skip over program name */
    if ( argc > 0 )
    yyin = fopen( argv[0], "r" );
    else
     yyin = stdin;
    yylex();
}
